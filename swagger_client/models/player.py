# coding: utf-8

"""
    RESTful-DOOM

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.map_object_flags import MapObjectFlags  # noqa: F401,E501
from swagger_client.models.player_cheat_flags import PlayerCheatFlags  # noqa: F401,E501
from swagger_client.models.player_key_cards import PlayerKeyCards  # noqa: F401,E501
from swagger_client.models.position1 import Position1  # noqa: F401,E501


class Player(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'armor': 'int',
        'kills': 'int',
        'items': 'int',
        'secrets': 'int',
        'weapon': 'int',
        'key_cards': 'PlayerKeyCards',
        'cheat_flags': 'PlayerCheatFlags',
        'id': 'int',
        'position': 'Position1',
        'angle': 'int',
        'health': 'int',
        'type': 'str',
        'distance': 'int',
        'attacking': 'int',
        'flags': 'MapObjectFlags'
    }

    attribute_map = {
        'armor': 'armor',
        'kills': 'kills',
        'items': 'items',
        'secrets': 'secrets',
        'weapon': 'weapon',
        'key_cards': 'keyCards',
        'cheat_flags': 'cheatFlags',
        'id': 'id',
        'position': 'position',
        'angle': 'angle',
        'health': 'health',
        'type': 'type',
        'distance': 'distance',
        'attacking': 'attacking',
        'flags': 'flags'
    }

    def __init__(self, armor=None, kills=None, items=None, secrets=None, weapon=None, key_cards=None, cheat_flags=None, id=None, position=None, angle=None, health=None, type=None, distance=None, attacking=None, flags=None):  # noqa: E501
        """Player - a model defined in Swagger"""  # noqa: E501

        self._armor = None
        self._kills = None
        self._items = None
        self._secrets = None
        self._weapon = None
        self._key_cards = None
        self._cheat_flags = None
        self._id = None
        self._position = None
        self._angle = None
        self._health = None
        self._type = None
        self._distance = None
        self._attacking = None
        self._flags = None
        self.discriminator = None

        if armor is not None:
            self.armor = armor
        if kills is not None:
            self.kills = kills
        if items is not None:
            self.items = items
        if secrets is not None:
            self.secrets = secrets
        if weapon is not None:
            self.weapon = weapon
        if key_cards is not None:
            self.key_cards = key_cards
        if cheat_flags is not None:
            self.cheat_flags = cheat_flags
        if id is not None:
            self.id = id
        if position is not None:
            self.position = position
        if angle is not None:
            self.angle = angle
        if health is not None:
            self.health = health
        if type is not None:
            self.type = type
        if distance is not None:
            self.distance = distance
        if attacking is not None:
            self.attacking = attacking
        if flags is not None:
            self.flags = flags

    @property
    def armor(self):
        """Gets the armor of this Player.  # noqa: E501

        amount of armor remaining  # noqa: E501

        :return: The armor of this Player.  # noqa: E501
        :rtype: int
        """
        return self._armor

    @armor.setter
    def armor(self, armor):
        """Sets the armor of this Player.

        amount of armor remaining  # noqa: E501

        :param armor: The armor of this Player.  # noqa: E501
        :type: int
        """

        self._armor = armor

    @property
    def kills(self):
        """Gets the kills of this Player.  # noqa: E501

        kill count  # noqa: E501

        :return: The kills of this Player.  # noqa: E501
        :rtype: int
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """Sets the kills of this Player.

        kill count  # noqa: E501

        :param kills: The kills of this Player.  # noqa: E501
        :type: int
        """

        self._kills = kills

    @property
    def items(self):
        """Gets the items of this Player.  # noqa: E501

        number of items picked up  # noqa: E501

        :return: The items of this Player.  # noqa: E501
        :rtype: int
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Player.

        number of items picked up  # noqa: E501

        :param items: The items of this Player.  # noqa: E501
        :type: int
        """

        self._items = items

    @property
    def secrets(self):
        """Gets the secrets of this Player.  # noqa: E501

        number of secret areas found  # noqa: E501

        :return: The secrets of this Player.  # noqa: E501
        :rtype: int
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this Player.

        number of secret areas found  # noqa: E501

        :param secrets: The secrets of this Player.  # noqa: E501
        :type: int
        """

        self._secrets = secrets

    @property
    def weapon(self):
        """Gets the weapon of this Player.  # noqa: E501

        0=hands, 1=pistol etc  # noqa: E501

        :return: The weapon of this Player.  # noqa: E501
        :rtype: int
        """
        return self._weapon

    @weapon.setter
    def weapon(self, weapon):
        """Sets the weapon of this Player.

        0=hands, 1=pistol etc  # noqa: E501

        :param weapon: The weapon of this Player.  # noqa: E501
        :type: int
        """

        self._weapon = weapon

    @property
    def key_cards(self):
        """Gets the key_cards of this Player.  # noqa: E501


        :return: The key_cards of this Player.  # noqa: E501
        :rtype: PlayerKeyCards
        """
        return self._key_cards

    @key_cards.setter
    def key_cards(self, key_cards):
        """Sets the key_cards of this Player.


        :param key_cards: The key_cards of this Player.  # noqa: E501
        :type: PlayerKeyCards
        """

        self._key_cards = key_cards

    @property
    def cheat_flags(self):
        """Gets the cheat_flags of this Player.  # noqa: E501


        :return: The cheat_flags of this Player.  # noqa: E501
        :rtype: PlayerCheatFlags
        """
        return self._cheat_flags

    @cheat_flags.setter
    def cheat_flags(self, cheat_flags):
        """Sets the cheat_flags of this Player.


        :param cheat_flags: The cheat_flags of this Player.  # noqa: E501
        :type: PlayerCheatFlags
        """

        self._cheat_flags = cheat_flags

    @property
    def id(self):
        """Gets the id of this Player.  # noqa: E501

        Identifier of this object  # noqa: E501

        :return: The id of this Player.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Player.

        Identifier of this object  # noqa: E501

        :param id: The id of this Player.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def position(self):
        """Gets the position of this Player.  # noqa: E501


        :return: The position of this Player.  # noqa: E501
        :rtype: Position1
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Player.


        :param position: The position of this Player.  # noqa: E501
        :type: Position1
        """

        self._position = position

    @property
    def angle(self):
        """Gets the angle of this Player.  # noqa: E501

        Angle this object is pointing  # noqa: E501

        :return: The angle of this Player.  # noqa: E501
        :rtype: int
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this Player.

        Angle this object is pointing  # noqa: E501

        :param angle: The angle of this Player.  # noqa: E501
        :type: int
        """

        self._angle = angle

    @property
    def health(self):
        """Gets the health of this Player.  # noqa: E501

        Health remaining  # noqa: E501

        :return: The health of this Player.  # noqa: E501
        :rtype: int
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Player.

        Health remaining  # noqa: E501

        :param health: The health of this Player.  # noqa: E501
        :type: int
        """

        self._health = health

    @property
    def type(self):
        """Gets the type of this Player.  # noqa: E501

        Type of this object  # noqa: E501

        :return: The type of this Player.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Player.

        Type of this object  # noqa: E501

        :param type: The type of this Player.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def distance(self):
        """Gets the distance of this Player.  # noqa: E501

        Distance from player  # noqa: E501

        :return: The distance of this Player.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Player.

        Distance from player  # noqa: E501

        :param distance: The distance of this Player.  # noqa: E501
        :type: int
        """

        self._distance = distance

    @property
    def attacking(self):
        """Gets the attacking of this Player.  # noqa: E501

        ID of the object this object is attacking  # noqa: E501

        :return: The attacking of this Player.  # noqa: E501
        :rtype: int
        """
        return self._attacking

    @attacking.setter
    def attacking(self, attacking):
        """Sets the attacking of this Player.

        ID of the object this object is attacking  # noqa: E501

        :param attacking: The attacking of this Player.  # noqa: E501
        :type: int
        """

        self._attacking = attacking

    @property
    def flags(self):
        """Gets the flags of this Player.  # noqa: E501


        :return: The flags of this Player.  # noqa: E501
        :rtype: MapObjectFlags
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this Player.


        :param flags: The flags of this Player.  # noqa: E501
        :type: MapObjectFlags
        """

        self._flags = flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Player, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Player):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
